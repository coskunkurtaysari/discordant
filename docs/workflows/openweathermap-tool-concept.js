// OpenWeatherMap Tool for Enhanced Business Intelligence AI Agent v5.5
// Uses One Call API 3.0 - 1,000 free calls per day

{
  "parameters": {
    "name": "openweathermap_tool",
    "description": "Get current weather, forecasts, and alerts for any location using OpenWeatherMap's One Call API 3.0. Provides structured weather data including current conditions, hourly forecasts (48 hours), daily forecasts (8 days), and government weather alerts. Perfect for business planning, travel preparation, and location-based decision making.",
    "jsCode": "// OpenWeatherMap One Call API 3.0 Tool\nconst startTime = Date.now();\n\ntry {\n  const inputData = $input.item.json;\n  const location = inputData.location || inputData.city || '';\n  const requestType = inputData.type || 'current'; // current, forecast, alerts, all\n  \n  console.log(`[WEATHER] Processing request for: ${location}`);\n  \n  if (!location || location.trim() === '') {\n    throw new Error('Location is required (city name, coordinates, or address)');\n  }\n  \n  // OpenWeatherMap API credentials\n  const API_KEY = $env.OPENWEATHER_API_KEY; // Set in n8n environment\n  const BASE_URL = 'https://api.openweathermap.org';\n  \n  // Step 1: Geocoding to get coordinates\n  const geocodeLocation = async (locationName) => {\n    try {\n      const geocodeUrl = `${BASE_URL}/geo/1.0/direct?q=${encodeURIComponent(locationName)}&limit=1&appid=${API_KEY}`;\n      \n      console.log(`[WEATHER] Geocoding: ${locationName}`);\n      \n      const geoResponse = await fetch(geocodeUrl);\n      \n      if (!geoResponse.ok) {\n        throw new Error(`Geocoding failed: HTTP ${geoResponse.status}`);\n      }\n      \n      const geoData = await geoResponse.json();\n      \n      if (!geoData || geoData.length === 0) {\n        throw new Error(`Location '${locationName}' not found`);\n      }\n      \n      const coords = geoData[0];\n      console.log(`[WEATHER] Found coordinates: ${coords.lat}, ${coords.lon}`);\n      \n      return {\n        lat: coords.lat,\n        lon: coords.lon,\n        name: coords.name,\n        country: coords.country,\n        state: coords.state\n      };\n      \n    } catch (error) {\n      console.error('[WEATHER] Geocoding error:', error.message);\n      throw error;\n    }\n  };\n  \n  // Step 2: Get weather data using One Call API 3.0\n  const getWeatherData = async (lat, lon) => {\n    try {\n      // One Call API 3.0 endpoint\n      const weatherUrl = `${BASE_URL}/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely&units=imperial&appid=${API_KEY}`;\n      \n      console.log(`[WEATHER] Fetching weather data for coordinates: ${lat}, ${lon}`);\n      \n      const weatherResponse = await fetch(weatherUrl);\n      \n      if (!weatherResponse.ok) {\n        throw new Error(`Weather API failed: HTTP ${weatherResponse.status}`);\n      }\n      \n      const weatherData = await weatherResponse.json();\n      \n      console.log(`[WEATHER] Weather data retrieved successfully`);\n      \n      return weatherData;\n      \n    } catch (error) {\n      console.error('[WEATHER] Weather API error:', error.message);\n      throw error;\n    }\n  };\n  \n  // Execute geocoding and weather lookup\n  const locationData = await geocodeLocation(location);\n  const weatherData = await getWeatherData(locationData.lat, locationData.lon);\n  \n  // Format comprehensive weather response\n  const formatWeatherResponse = (location, weather) => {\n    const current = weather.current;\n    const today = weather.daily[0];\n    const alerts = weather.alerts || [];\n    \n    let response = `üå§Ô∏è **Weather Report: ${location.name}${location.state ? ', ' + location.state : ''}, ${location.country}**\\n\\n`;\n    \n    // Current conditions\n    response += `**üå°Ô∏è Current Conditions**:\\n`;\n    response += `‚Ä¢ **Temperature**: ${Math.round(current.temp)}¬∞F (feels like ${Math.round(current.feels_like)}¬∞F)\\n`;\n    response += `‚Ä¢ **Condition**: ${current.weather[0].description}\\n`;\n    response += `‚Ä¢ **Humidity**: ${current.humidity}%\\n`;\n    response += `‚Ä¢ **Wind**: ${Math.round(current.wind_speed)} mph\\n`;\n    response += `‚Ä¢ **Visibility**: ${Math.round(current.visibility / 1609)} miles\\n`;\n    response += `‚Ä¢ **UV Index**: ${current.uvi}\\n\\n`;\n    \n    // Today's forecast\n    response += `**üìÖ Today's Forecast**:\\n`;\n    response += `‚Ä¢ **High/Low**: ${Math.round(today.temp.max)}¬∞F / ${Math.round(today.temp.min)}¬∞F\\n`;\n    response += `‚Ä¢ **Condition**: ${today.weather[0].description}\\n`;\n    response += `‚Ä¢ **Precipitation**: ${Math.round((today.pop || 0) * 100)}% chance\\n`;\n    response += `‚Ä¢ **Sunrise**: ${new Date(today.sunrise * 1000).toLocaleTimeString()}\\n`;\n    response += `‚Ä¢ **Sunset**: ${new Date(today.sunset * 1000).toLocaleTimeString()}\\n\\n`;\n    \n    // 5-day forecast\n    response += `**üìä 5-Day Forecast**:\\n`;\n    weather.daily.slice(1, 6).forEach((day, index) => {\n      const date = new Date(day.dt * 1000);\n      const dayName = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n      response += `‚Ä¢ **${dayName}**: ${Math.round(day.temp.max)}¬∞/${Math.round(day.temp.min)}¬∞F - ${day.weather[0].description}\\n`;\n    });\n    \n    // Weather alerts\n    if (alerts.length > 0) {\n      response += `\\nüö® **Weather Alerts**:\\n`;\n      alerts.forEach(alert => {\n        response += `‚Ä¢ **${alert.event}**: ${alert.description.substring(0, 200)}...\\n`;\n      });\n    }\n    \n    response += `\\n**üìç Data Source**: [OpenWeatherMap](https://openweathermap.org) ‚Ä¢ **Updated**: ${new Date(current.dt * 1000).toLocaleString()}`;\n    \n    return response;\n  };\n  \n  const response = formatWeatherResponse(locationData, weatherData);\n  const processingTime = Date.now() - startTime;\n  \n  console.log(`[WEATHER] Complete in ${processingTime}ms`);\n  \n  return response;\n  \n} catch (error) {\n  console.error('[WEATHER] Error:', error.message);\n  \n  const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n  \n  return `‚ùå **Weather Lookup Error**\\n\\nError: ${error.message}\\n\\n**Time**: ${currentTime}\\n**Troubleshooting**:\\n‚Ä¢ Verify location spelling and format\\n‚Ä¢ Check OpenWeatherMap API key and quotas\\n‚Ä¢ Try with city name and state/country (e.g., \"Miami, FL, US\")`;\n}"
  },
  "id": "weather-tool-id",
  "name": "OpenWeatherMap_Tool",
  "type": "@n8n/n8n-nodes-langchain.toolCode",
  "typeVersion": 1.1,
  "position": [1320, 600]
}

// Required Environment Variable:
// OPENWEATHER_API_KEY = your_api_key_here

// Usage Examples in AI Agent:
// "What's the weather in Miami?"
// "Get weather forecast for New York City, NY"
// "Check weather alerts for Tampa, Florida"
// "Current conditions in London, UK" 