{
  "name": "Discordant File Processing Workflow",
  "version": "2.0",
  "description": "Enhanced file processing with AI analysis, OCR, metadata extraction, and external document creation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "file-processor",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "File Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [0, 200],
      "webhookId": "file-processor-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced File Processing Input Validator\nconst startTime = Date.now();\nconsole.log('[FILE_PROCESSOR] Starting enhanced file processing');\n\ntry {\n  const input = $input.first().json;\n  console.log('[FILE_PROCESSOR] Raw webhook data:', JSON.stringify(input, null, 2));\n  \n  // Extract file metadata from payload\n  const fileMetadata = input.fileMetadata || {};\n  const fileUrl = input.metadata?.attachmentUrl || input.fileUrl;\n  const fileType = fileMetadata.fileType || 'UNKNOWN';\n  const extractedText = fileMetadata.extractedText || '';\n  const userPrompt = input.userPrompt || input.message || '';\n  \n  // Validate required fields\n  if (!fileUrl) {\n    throw new Error('File URL is required for processing');\n  }\n  \n  // Determine processing strategy\n  const processingNeeded = {\n    ocrRequired: fileType === 'PDF' || (fileType === 'IMAGE' && !extractedText),\n    businessAnalysis: true,\n    workflowTriggers: true,\n    externalDocCreation: extractedText.length > 5000 || fileType === 'PDF'\n  };\n  \n  const result = {\n    // Basic file info\n    fileUrl: fileUrl,\n    fileType: fileType,\n    fileName: fileMetadata.fileName || fileUrl.split('/').pop(),\n    metadataId: fileMetadata.metadataId,\n    \n    // Content analysis\n    extractedText: extractedText,\n    userPrompt: userPrompt,\n    businessContext: fileMetadata.businessContext,\n    \n    // Processing flags\n    processingNeeded: processingNeeded,\n    \n    // User context\n    userId: input.userId || input.metadata?.userId,\n    channelId: input.channelId || input.metadata?.channelId,\n    userName: input.userName || 'File Processor',\n    \n    // Workflow metadata\n    timestamp: new Date().toISOString(),\n    workflowVersion: '2.0',\n    processingStartTime: startTime,\n    requestId: require('crypto').randomBytes(8).toString('hex')\n  };\n  \n  console.log('[FILE_PROCESSOR] Input validated successfully:', {\n    fileUrl: result.fileUrl,\n    fileType: result.fileType,\n    hasExtractedText: !!result.extractedText,\n    processingNeeded: result.processingNeeded\n  });\n  \n  return result;\n  \n} catch (error) {\n  console.error('[FILE_PROCESSOR] Input validation error:', error.message);\n  return {\n    error: true,\n    errorMessage: error.message,\n    timestamp: new Date().toISOString(),\n    processingStartTime: startTime\n  };\n}"
      },
      "id": "input-validator",
      "name": "1. Input Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "number": [],
          "string": [
            {
              "id": "error-check",
              "value1": "={{ $json.error }}",
              "operation": "notEqual",
              "value2": "true"
            }
          ]
        }
      },
      "id": "error-filter",
      "name": "2. Error Filter",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 1,
      "position": [400, 200]
    },
    {
      "parameters": {
        "model": "gpt-4-vision-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert business document analyzer. Your task is to analyze uploaded files and extract comprehensive business intelligence.\n\nFor IMAGES:\n1. Perform OCR to extract all visible text\n2. Identify business context (meetings, locations, companies, people)\n3. Extract action items and important information\n4. Categorize content type\n5. Detect location information if visible\n6. Suggest relevant tags\n7. Estimate business value and urgency\n\nFor PDFs (when text is provided):\n1. Analyze the extracted text content\n2. Identify key business entities\n3. Extract action items and deadlines\n4. Summarize main points\n5. Categorize document type\n6. Identify compliance or regulatory aspects\n\nUser Context: {{ $json.userPrompt }}\n\nRespond in JSON format with:\n{\n  \"extractedText\": \"OCR text for images\",\n  \"description\": \"Brief description\",\n  \"businessContext\": \"Business relevance and context\",\n  \"summary\": \"Key points summary\",\n  \"tags\": [\"tag1\", \"tag2\"],\n  \"categories\": [\"category1\", \"category2\"],\n  \"entities\": [\"company1\", \"person1\", \"location1\"],\n  \"actionItems\": [\"action1\", \"action2\"],\n  \"urgency\": \"low|medium|high\",\n  \"businessValue\": \"low|medium|high\",\n  \"location\": {\n    \"address\": \"detected address\",\n    \"businessName\": \"business name\",\n    \"type\": \"office|meeting|site\"\n  },\n  \"compliance\": {\n    \"regulatory\": \"any regulatory aspects\",\n    \"dataClassification\": \"public|internal|confidential|restricted\"\n  },\n  \"nextSteps\": [\"recommended actions\"]\n}"
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "Analyze this {{ $json.fileType.toLowerCase() }} file for comprehensive business intelligence.\n\nFile URL: {{ $json.fileUrl }}\nUser Context: {{ $json.userPrompt || 'General business document analysis' }}\n\n{{ $json.extractedText ? 'Extracted Text Content: ' + $json.extractedText : 'Please perform OCR on this image.' }}"
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "={{ $json.fileUrl }}",
                    "detail": "high"
                  }
                }
              ]
            }
          ]
        },
        "options": {
          "maxTokens": 2000,
          "temperature": 0.1
        },
        "requestFormat": "json"
      },
      "id": "ai-analyzer",
      "name": "3. AI Business Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [600, 200],
      "credentials": {
        "openAiApi": {
          "id": "your-openai-credentials",
          "name": "OpenAI GPT-4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Business Intelligence Processor\nconst startTime = Date.now();\nconsole.log('[FILE_PROCESSOR] Processing AI analysis results');\n\ntry {\n  const originalData = $('1. Input Validator').first().json;\n  const aiResponse = $input.first().json;\n  \n  console.log('[FILE_PROCESSOR] AI Response:', JSON.stringify(aiResponse, null, 2));\n  \n  // Parse AI response (handle different response formats)\n  let analysis = {};\n  \n  if (aiResponse.choices && aiResponse.choices[0]?.message?.content) {\n    try {\n      analysis = JSON.parse(aiResponse.choices[0].message.content);\n    } catch (parseError) {\n      console.warn('[FILE_PROCESSOR] Failed to parse AI response as JSON:', parseError.message);\n      analysis = {\n        description: aiResponse.choices[0].message.content,\n        tags: [],\n        categories: ['document'],\n        entities: [],\n        actionItems: []\n      };\n    }\n  } else if (typeof aiResponse.output === 'string') {\n    try {\n      analysis = JSON.parse(aiResponse.output);\n    } catch (parseError) {\n      analysis = {\n        description: aiResponse.output,\n        tags: [],\n        categories: ['document'],\n        entities: [],\n        actionItems: []\n      };\n    }\n  } else {\n    analysis = aiResponse;\n  }\n  \n  // Enhance analysis with business intelligence\n  const enhancedAnalysis = {\n    // Original file data\n    fileUrl: originalData.fileUrl,\n    fileType: originalData.fileType,\n    fileName: originalData.fileName,\n    metadataId: originalData.metadataId,\n    \n    // AI Analysis Results\n    extractedText: analysis.extractedText || originalData.extractedText || '',\n    description: analysis.description || 'Business document processed',\n    businessContext: analysis.businessContext || analysis.summary || '',\n    aiSummary: analysis.summary || analysis.description || '',\n    \n    // Categorization\n    tags: analysis.tags || [],\n    categories: analysis.categories || ['document'],\n    entities: analysis.entities || [],\n    actionItems: analysis.actionItems || [],\n    \n    // Business Intelligence\n    urgency: analysis.urgency || 'medium',\n    businessValue: analysis.businessValue || 'medium',\n    location: analysis.location || null,\n    compliance: analysis.compliance || null,\n    nextSteps: analysis.nextSteps || [],\n    \n    // Workflow Routing\n    shouldCreateExternalDoc: (\n      (analysis.extractedText && analysis.extractedText.length > 5000) ||\n      originalData.fileType === 'PDF' ||\n      analysis.businessValue === 'high'\n    ),\n    workflowTriggers: [\n      ...(analysis.actionItems && analysis.actionItems.length > 0 ? ['task_management'] : []),\n      ...(analysis.entities && analysis.entities.length > 3 ? ['crm_integration'] : []),\n      ...(analysis.urgency === 'high' ? ['priority_notification'] : []),\n      ...(analysis.compliance && analysis.compliance.regulatory ? ['compliance_review'] : []),\n      'business_intelligence'\n    ],\n    \n    // Processing metadata\n    userId: originalData.userId,\n    channelId: originalData.channelId,\n    userName: originalData.userName,\n    timestamp: new Date().toISOString(),\n    processingTime: Date.now() - originalData.processingStartTime,\n    aiProcessingTime: Date.now() - startTime,\n    requestId: originalData.requestId\n  };\n  \n  console.log('[FILE_PROCESSOR] Enhanced analysis completed:', {\n    fileType: enhancedAnalysis.fileType,\n    hasExtractedText: !!enhancedAnalysis.extractedText,\n    entityCount: enhancedAnalysis.entities.length,\n    actionItemCount: enhancedAnalysis.actionItems.length,\n    urgency: enhancedAnalysis.urgency,\n    businessValue: enhancedAnalysis.businessValue,\n    shouldCreateExternalDoc: enhancedAnalysis.shouldCreateExternalDoc,\n    workflowTriggers: enhancedAnalysis.workflowTriggers\n  });\n  \n  return enhancedAnalysis;\n  \n} catch (error) {\n  console.error('[FILE_PROCESSOR] Analysis processing error:', error.message);\n  const originalData = $('1. Input Validator').first().json;\n  \n  return {\n    ...originalData,\n    error: true,\n    errorMessage: error.message,\n    errorStep: 'ai_analysis_processing',\n    timestamp: new Date().toISOString(),\n    processingTime: Date.now() - originalData.processingStartTime\n  };\n}"
      },
      "id": "bi-processor",
      "name": "4. Business Intelligence Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "id": "should-create-doc",
              "value1": "={{ $json.shouldCreateExternalDoc }}",
              "value2": true
            }
          ]
        }
      },
      "id": "external-doc-filter",
      "name": "5. External Doc Filter",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 1,
      "position": [1000, 100]
    },
    {
      "parameters": {
        "jsCode": "// External Document Creator (Google Docs Integration)\nconst startTime = Date.now();\nconsole.log('[FILE_PROCESSOR] Creating external document');\n\ntry {\n  const data = $input.first().json;\n  \n  // Prepare document content\n  const documentTitle = `${data.fileName} - AI Analysis`;\n  const documentContent = `\n# ${documentTitle}\n\n**Generated**: ${new Date().toLocaleString()}\n**File Type**: ${data.fileType}\n**Business Value**: ${data.businessValue}\n**Urgency**: ${data.urgency}\n\n## Summary\n${data.aiSummary}\n\n## Business Context\n${data.businessContext}\n\n## Extracted Text\n${data.extractedText}\n\n## Key Entities\n${data.entities.map(entity => `- ${entity}`).join('\\n')}\n\n## Action Items\n${data.actionItems.map(item => `- [ ] ${item}`).join('\\n')}\n\n## Categories\n${data.categories.join(', ')}\n\n## Tags\n${data.tags.join(', ')}\n\n${data.location ? `## Location\\n**Address**: ${data.location.address || 'N/A'}\\n**Business**: ${data.location.businessName || 'N/A'}` : ''}\n\n${data.compliance ? `## Compliance\\n**Regulatory**: ${data.compliance.regulatory || 'N/A'}\\n**Classification**: ${data.compliance.dataClassification || 'Internal'}` : ''}\n\n## Recommended Next Steps\n${data.nextSteps.map(step => `- ${step}`).join('\\n')}\n\n---\n*Generated by Discordant AI File Processor*\n  `;\n  \n  // TODO: Implement actual Google Docs API integration\n  // For now, create a placeholder URL\n  const placeholderDocUrl = `https://docs.google.com/document/d/placeholder-${data.requestId}/edit`;\n  \n  const result = {\n    ...data,\n    externalDocuments: {\n      googleDocsUrl: placeholderDocUrl,\n      documentTitle: documentTitle,\n      documentContent: documentContent,\n      created: true,\n      createdAt: new Date().toISOString()\n    },\n    externalLinks: [\n      {\n        type: 'google_docs',\n        url: placeholderDocUrl,\n        title: documentTitle,\n        description: 'AI-enhanced document analysis with full text and business intelligence'\n      }\n    ],\n    externalDocCreationTime: Date.now() - startTime\n  };\n  \n  console.log('[FILE_PROCESSOR] External document created:', {\n    title: documentTitle,\n    url: placeholderDocUrl,\n    contentLength: documentContent.length\n  });\n  \n  return result;\n  \n} catch (error) {\n  console.error('[FILE_PROCESSOR] External document creation error:', error.message);\n  return {\n    ...$input.first().json,\n    externalDocuments: {\n      created: false,\n      error: error.message\n    }\n  };\n}"
      },
      "id": "external-doc-creator",
      "name": "6. External Document Creator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 100]
    },
    {
      "parameters": {
        "jsCode": "// Workflow Router and Database Update\nconst startTime = Date.now();\nconsole.log('[FILE_PROCESSOR] Routing to additional workflows');\n\ntry {\n  const data = $input.first().json;\n  \n  // Merge data from external doc creator and main flow\n  const externalDocData = $('6. External Document Creator').first()?.json || {};\n  const mainData = $('4. Business Intelligence Processor').first().json;\n  \n  const mergedData = {\n    ...mainData,\n    ...(externalDocData.externalDocuments ? {\n      externalDocuments: externalDocData.externalDocuments,\n      externalLinks: externalDocData.externalLinks\n    } : {})\n  };\n  \n  // Prepare workflow triggers\n  const workflowPayloads = [];\n  \n  // Task Management Workflow\n  if (mergedData.actionItems && mergedData.actionItems.length > 0) {\n    workflowPayloads.push({\n      workflowType: 'task_management',\n      priority: mergedData.urgency,\n      payload: {\n        tasks: mergedData.actionItems.map(item => ({\n          title: item,\n          priority: mergedData.urgency,\n          source: 'file_analysis',\n          fileUrl: mergedData.fileUrl,\n          dueDate: null // Could be extracted from text analysis\n        })),\n        context: {\n          fileName: mergedData.fileName,\n          fileType: mergedData.fileType,\n          businessContext: mergedData.businessContext\n        }\n      }\n    });\n  }\n  \n  // CRM Integration Workflow\n  if (mergedData.entities && mergedData.entities.length > 0) {\n    workflowPayloads.push({\n      workflowType: 'crm_integration',\n      priority: 'normal',\n      payload: {\n        entities: mergedData.entities,\n        context: mergedData.businessContext,\n        fileSource: mergedData.fileUrl,\n        extractedText: mergedData.extractedText.substring(0, 1000) // Limit for CRM\n      }\n    });\n  }\n  \n  // Compliance Review Workflow\n  if (mergedData.compliance && mergedData.compliance.regulatory) {\n    workflowPayloads.push({\n      workflowType: 'compliance_review',\n      priority: 'high',\n      payload: {\n        document: {\n          url: mergedData.fileUrl,\n          type: mergedData.fileType,\n          classification: mergedData.compliance.dataClassification\n        },\n        regulatoryAspects: mergedData.compliance.regulatory,\n        reviewRequired: true\n      }\n    });\n  }\n  \n  // Prepare database update payload\n  const databaseUpdate = {\n    metadataId: mergedData.metadataId,\n    updates: {\n      processingStatus: 'COMPLETED',\n      extractedText: mergedData.extractedText,\n      description: mergedData.description,\n      tags: JSON.stringify(mergedData.tags),\n      location: mergedData.location ? JSON.stringify(mergedData.location) : null,\n      businessContext: mergedData.businessContext,\n      aiSummary: mergedData.aiSummary,\n      aiCategories: JSON.stringify(mergedData.categories),\n      businessEntities: JSON.stringify(mergedData.entities),\n      actionItems: JSON.stringify(mergedData.actionItems),\n      externalLinks: mergedData.externalLinks ? JSON.stringify(mergedData.externalLinks) : null,\n      googleDocsUrl: mergedData.externalDocuments?.googleDocsUrl || null,\n      processingStatus: 'COMPLETED',\n      ocrCompleted: !!mergedData.extractedText,\n      aiAnalyzed: true,\n      lastProcessed: new Date().toISOString(),\n      workflowTriggered: true,\n      workflowResults: JSON.stringify({\n        workflowCount: workflowPayloads.length,\n        triggeredWorkflows: workflowPayloads.map(w => w.workflowType),\n        processingTime: Date.now() - mergedData.processingStartTime,\n        completedAt: new Date().toISOString()\n      })\n    }\n  };\n  \n  const result = {\n    // Core response data\n    success: true,\n    fileUrl: mergedData.fileUrl,\n    fileName: mergedData.fileName,\n    fileType: mergedData.fileType,\n    metadataId: mergedData.metadataId,\n    \n    // Analysis results\n    analysis: {\n      description: mergedData.description,\n      businessContext: mergedData.businessContext,\n      summary: mergedData.aiSummary,\n      tags: mergedData.tags,\n      categories: mergedData.categories,\n      entities: mergedData.entities,\n      actionItems: mergedData.actionItems,\n      urgency: mergedData.urgency,\n      businessValue: mergedData.businessValue\n    },\n    \n    // External documents\n    externalDocuments: mergedData.externalDocuments || null,\n    externalLinks: mergedData.externalLinks || [],\
    \n    // Workflow routing\n    workflowTriggers: workflowPayloads,\n    databaseUpdate: databaseUpdate,\n    \n    // Processing metadata\n    processing: {\n      requestId: mergedData.requestId,\n      totalProcessingTime: Date.now() - mergedData.processingStartTime,\n      workflowRoutingTime: Date.now() - startTime,\n      completedAt: new Date().toISOString(),\n      version: '2.0'\n    },\n    \n    // Response message for Discord\n    discordResponse: {\n      content: `🔍 **File Analysis Complete**\n\n` +\n               `📁 **${mergedData.fileName}**\n` +\n               `📊 **Type**: ${mergedData.fileType}\n` +\n               `⭐ **Business Value**: ${mergedData.businessValue}\n` +\n               `🚨 **Urgency**: ${mergedData.urgency}\n\n` +\n               `📝 **Summary**: ${mergedData.description}\n\n` +\n               `🏢 **Business Context**: ${mergedData.businessContext}\n\n` +\n               `${mergedData.actionItems.length > 0 ? `✅ **Action Items** (${mergedData.actionItems.length}):\n${mergedData.actionItems.slice(0, 3).map(item => `• ${item}`).join('\n')}${mergedData.actionItems.length > 3 ? '\n• ...' : ''}\n\n` : ''}` +\n               `${mergedData.entities.length > 0 ? `🏷️ **Key Entities**: ${mergedData.entities.slice(0, 5).join(', ')}${mergedData.entities.length > 5 ? ', ...' : ''}\n\n` : ''}` +\n               `${mergedData.externalLinks?.length > 0 ? `📄 **External Documents**:\n${mergedData.externalLinks.map(link => `• [${link.title}](${link.url})`).join('\n')}\n\n` : ''}` +\n               `🔄 **Triggered ${workflowPayloads.length} additional workflow(s)**\n` +\n               `⏱️ **Processing Time**: ${Math.round((Date.now() - mergedData.processingStartTime) / 1000)}s`,\n      metadata: {\n        userId: mergedData.userId,\n        channelId: mergedData.channelId,\n        platform: 'discordant',\n        responseType: 'file_analysis_complete',\n        timestamp: new Date().toISOString()\n      }\n    }\n  };\n  \n  console.log('[FILE_PROCESSOR] Workflow routing completed:', {\n    workflowCount: workflowPayloads.length,\n    externalDocsCreated: !!mergedData.externalDocuments,\n    totalProcessingTime: result.processing.totalProcessingTime\n  });\n  \n  return result;\n  \n} catch (error) {\n  console.error('[FILE_PROCESSOR] Workflow routing error:', error.message);\n  return {\n    success: false,\n    error: true,\n    errorMessage: error.message,\n    errorStep: 'workflow_routing',\n    timestamp: new Date().toISOString()\n  };\n}"
      },
      "id": "workflow-router",
      "name": "7. Workflow Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $json.discordResponse ? 'https://your-discordant-domain.com/api/workflow-response' : 'https://your-discordant-domain.com/api/database-update' }}",
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Bearer {{ $env.DISCORDANT_API_KEY }}"
        },
        "body": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "discordant-response",
      "name": "8. Send Response to Discordant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Error Handler and Fallback Response\nconst startTime = Date.now();\n\ntry {\n  const errorData = $input.first().json;\n  console.error('[FILE_PROCESSOR] Handling workflow error:', errorData);\n  \n  // Create user-friendly error response\n  const errorResponse = {\n    success: false,\n    error: true,\n    fileUrl: errorData.fileUrl || 'Unknown file',\n    fileName: errorData.fileName || 'Unknown file',\n    errorMessage: errorData.errorMessage || 'Unknown processing error',\n    errorStep: errorData.errorStep || 'unknown',\n    \n    discordResponse: {\n      content: `⚠️ **File Processing Error**\n\n` +\n               `📁 **File**: ${errorData.fileName || 'Unknown file'}\n` +\n               `❌ **Error**: ${errorData.errorMessage || 'Processing failed'}\n` +\n               `🔧 **Step**: ${errorData.errorStep || 'Unknown step'}\n\n` +\n               `**What to try next:**\n` +\n               `• Ensure the file is accessible and properly uploaded\n` +\n               `• Try re-uploading the file\n` +\n               `• Contact support if the issue persists\n\n` +\n               `**Error ID**: ${errorData.requestId || 'Unknown'}\n` +\n               `**Time**: ${new Date().toLocaleString()}`,\n      metadata: {\n        userId: errorData.userId || 'unknown',\n        channelId: errorData.channelId || 'unknown',\n        platform: 'discordant',\n        responseType: 'file_processing_error',\n        timestamp: new Date().toISOString(),\n        errorOccurred: true\n      }\n    },\n    \n    processing: {\n      requestId: errorData.requestId || 'unknown',\n      errorHandlingTime: Date.now() - startTime,\n      timestamp: new Date().toISOString()\n    }\n  };\n  \n  return errorResponse;\n  \n} catch (handlerError) {\n  console.error('[FILE_PROCESSOR] Error in error handler:', handlerError.message);\n  \n  return {\n    success: false,\n    error: true,\n    errorMessage: 'Critical error in file processing',\n    discordResponse: {\n      content: `🚨 **Critical File Processing Error**\n\nA system error occurred while processing your file. Please contact support.\n\n**Error Code**: CRITICAL_HANDLER_FAILURE\n**Time**: ${new Date().toLocaleString()}`,\n      metadata: {\n        platform: 'discordant',\n        responseType: 'critical_error',\n        timestamp: new Date().toISOString(),\n        errorOccurred: true\n      }\n    }\n  };\n}"
      },
      "id": "error-handler",
      "name": "9. Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    }
  ],
  "connections": {
    "File Upload Webhook": {
      "main": [
        [
          {
            "node": "1. Input Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Input Validator": {
      "main": [
        [
          {
            "node": "2. Error Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Error Filter": {
      "main": [
        [
          {
            "node": "3. AI Business Analysis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "9. Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. AI Business Analysis": {
      "main": [
        [
          {
            "node": "4. Business Intelligence Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Business Intelligence Processor": {
      "main": [
        [
          {
            "node": "5. External Doc Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "7. Workflow Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. External Doc Filter": {
      "main": [
        [
          {
            "node": "6. External Document Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. External Document Creator": {
      "main": [
        [
          {
            "node": "7. Workflow Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7. Workflow Router": {
      "main": [
        [
          {
            "node": "8. Send Response to Discordant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9. Error Handler": {
      "main": [
        [
          {
            "node": "8. Send Response to Discordant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "id": "file-processing-workflow-v2"
} 