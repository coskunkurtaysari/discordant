{
  "name": "GSA Research Modular Sub-Workflow",
  "nodes": [
    {
      "parameters": {
        "operation": "noOp"
      },
      "id": "input-processor",
      "name": "Input Processor",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [0, 0]
    },
    {
      "parameters": {
        "jsCode": "// Input Processing and Validation\nconst startTime = Date.now();\n\ntry {\n  const input = $input.first().json;\n  const inputCompany = input.query || input.company || '';\n  const focus = input.focus || 'complete';\n  \n  console.log(`[GSA_INPUT] Processing: ${inputCompany}`);\n  \n  if (!inputCompany || inputCompany.trim() === '') {\n    throw new Error('Company name or URL is required');\n  }\n  \n  // Clean and normalize input\n  const cleanCompany = inputCompany.trim();\n  \n  return {\n    originalInput: inputCompany,\n    cleanCompany: cleanCompany,\n    focus: focus,\n    timestamp: new Date().toISOString(),\n    processingStartTime: startTime\n  };\n  \n} catch (error) {\n  console.error('[GSA_INPUT] Error:', error.message);\n  return {\n    error: true,\n    errorMessage: error.message,\n    originalInput: inputCompany || 'Unknown',\n    cleanCompany: '',\n    focus: 'complete',\n    timestamp: new Date().toISOString()\n  };\n}"
      },
      "id": "company-extraction",
      "name": "Company Extraction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 0]
    },
    {
      "parameters": {
        "jsCode": "// Google Search Integration\nconst input = $input.first().json;\n\nif (input.error) {\n  return input; // Pass through errors\n}\n\ntry {\n  const GOOGLE_API_KEY = 'AIzaSyB0rv0QDGWy7Gno284IybZVNB9BDJzSEPs';\n  const SEARCH_ENGINE_ID = '16331af4b4dc043f5';\n  \n  const searchCompanyInfo = async (companyName) => {\n    try {\n      const searchQuery = encodeURIComponent(`${companyName} company about contact`);\n      const searchUrl = `https://www.googleapis.com/customsearch/v1?key=${GOOGLE_API_KEY}&cx=${SEARCH_ENGINE_ID}&q=${searchQuery}&num=5`;\n      \n      console.log(`[GSA_SEARCH] Querying: ${searchQuery}`);\n      \n      const response = await fetch(searchUrl);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data.error) {\n        console.error('[GSA_SEARCH] API Error:', data.error);\n        throw new Error(`Google API Error: ${data.error.message}`);\n      }\n      \n      if (data.items && data.items.length > 0) {\n        console.log(`[GSA_SEARCH] Found ${data.items.length} results`);\n        const firstResult = data.items[0];\n        return {\n          title: firstResult.title,\n          snippet: firstResult.snippet,\n          link: firstResult.link,\n          displayLink: firstResult.displayLink,\n          searchSuccessful: true\n        };\n      }\n      \n      console.log('[GSA_SEARCH] No search results found');\n      return { searchSuccessful: false };\n    } catch (error) {\n      console.error('[GSA_SEARCH] Error:', error.message);\n      return { searchSuccessful: false, searchError: error.message };\n    }\n  };\n  \n  const searchResults = await searchCompanyInfo(input.cleanCompany);\n  \n  // Extract company info from search results\n  let extractedCompany = input.cleanCompany;\n  let companyDomain = null;\n  let realBusinessInfo = null;\n  \n  if (searchResults.searchSuccessful) {\n    extractedCompany = searchResults.title.split(' - ')[0].split(' | ')[0] || extractedCompany;\n    companyDomain = searchResults.displayLink;\n    realBusinessInfo = searchResults.snippet;\n    console.log(`[GSA_SEARCH] Found company: ${extractedCompany} at ${companyDomain}`);\n  }\n  \n  return {\n    ...input,\n    extractedCompany,\n    companyDomain,\n    realBusinessInfo,\n    searchResults: searchResults.searchSuccessful ? searchResults : null,\n    searchStatus: searchResults.searchSuccessful ? 'success' : 'failed'\n  };\n  \n} catch (error) {\n  console.error('[GSA_SEARCH] Unexpected error:', error.message);\n  return {\n    ...input,\n    searchError: error.message,\n    searchStatus: 'error'\n  };\n}"
      },
      "id": "google-search",
      "name": "Google Search Integration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 0]
    },
    {
      "parameters": {
        "jsCode": "// Industry Classification\nconst input = $input.first().json;\n\nif (input.error) {\n  return input; // Pass through errors\n}\n\ntry {\n  const detectBusinessType = (companyName, searchInfo) => {\n    const searchText = (searchInfo || '').toLowerCase();\n    const name = companyName.toLowerCase();\n    const types = [];\n    \n    const serviceKeywords = {\n      'staffing': ['staffing', 'recruiting', 'employment', 'workforce', 'personnel', 'talent'],\n      'medical': ['medical', 'health', 'healthcare', 'pharma', 'surgical', 'care', 'hospital'],\n      'technology': ['tech', 'software', 'IT', 'cyber', 'computer', 'digital', 'ai', 'cloud'],\n      'security': ['security', 'protection', 'guard', 'safety', 'surveillance'],\n      'consulting': ['consulting', 'advisory', 'solutions', 'services', 'professional'],\n      'manufacturing': ['manufacturing', 'factory', 'production', 'industrial', 'materials'],\n      'retail': ['retail', 'store', 'shopping', 'consumer', 'sales', 'franchise'],\n      'finance': ['financial', 'bank', 'investment', 'insurance', 'lending'],\n      'construction': ['construction', 'building', 'engineering', 'contractor'],\n      'logistics': ['logistics', 'shipping', 'transport', 'delivery', 'supply chain']\n    };\n    \n    for (const [type, keywords] of Object.entries(serviceKeywords)) {\n      if (keywords.some(keyword => name.includes(keyword) || searchText.includes(keyword))) {\n        types.push(type);\n      }\n    }\n    \n    if (types.length === 0) {\n      types.push('services');\n    }\n    \n    return types;\n  };\n  \n  const businessTypes = detectBusinessType(input.extractedCompany, input.realBusinessInfo);\n  const primaryType = businessTypes[0] || 'services';\n  \n  console.log(`[GSA_INDUSTRY] Classified ${input.extractedCompany} as: ${primaryType}`);\n  \n  return {\n    ...input,\n    businessTypes,\n    primaryType,\n    industryClassified: true\n  };\n  \n} catch (error) {\n  console.error('[GSA_INDUSTRY] Error:', error.message);\n  return {\n    ...input,\n    industryError: error.message,\n    businessTypes: ['services'],\n    primaryType: 'services',\n    industryClassified: false\n  };\n}"
      },
      "id": "industry-analysis",
      "name": "Industry Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 0]
    },
    {
      "parameters": {
        "jsCode": "// GSA Schedule Matching\nconst input = $input.first().json;\n\nif (input.error) {\n  return input; // Pass through errors\n}\n\ntry {\n  const gsaScheduleOpportunities = {\n    'consulting': { schedule: 'OASIS+', naics: ['541611', '541618'], opportunity: 'High' },\n    'staffing': { schedule: 'Schedule 02', naics: ['561320', '561330'], opportunity: 'Very High' },\n    'technology': { schedule: 'Schedule 70', naics: ['541511', '541512'], opportunity: 'Very High' },\n    'medical': { schedule: 'Schedule 65', naics: ['621100', '423450'], opportunity: 'Excellent' },\n    'security': { schedule: 'Schedule 84', naics: ['561612', '561621'], opportunity: 'Very High' },\n    'manufacturing': { schedule: 'Schedule 56', naics: ['331000', '332000'], opportunity: 'High' },\n    'retail': { schedule: 'Schedule 75', naics: ['447000', '448000'], opportunity: 'Moderate' },\n    'finance': { schedule: 'OASIS+', naics: ['522000', '523000'], opportunity: 'High' },\n    'construction': { schedule: 'Schedule 36', naics: ['236000', '237000'], opportunity: 'Very High' },\n    'logistics': { schedule: 'Schedule 48', naics: ['484000', '493000'], opportunity: 'High' },\n    'services': { schedule: 'Multiple Options', naics: ['561000', '541000'], opportunity: 'Moderate' }\n  };\n  \n  const scheduleInfo = gsaScheduleOpportunities[input.primaryType] || gsaScheduleOpportunities['services'];\n  \n  console.log(`[GSA_SCHEDULE] Matched ${input.primaryType} to ${scheduleInfo.schedule}`);\n  \n  return {\n    ...input,\n    gsaSchedule: scheduleInfo.schedule,\n    naicsCodes: scheduleInfo.naics,\n    opportunityLevel: scheduleInfo.opportunity,\n    scheduleMatched: true\n  };\n  \n} catch (error) {\n  console.error('[GSA_SCHEDULE] Error:', error.message);\n  return {\n    ...input,\n    scheduleError: error.message,\n    gsaSchedule: 'Multiple Options',\n    naicsCodes: ['561000'],\n    opportunityLevel: 'Moderate',\n    scheduleMatched: false\n  };\n}"
      },
      "id": "gsa-schedule-matching",
      "name": "GSA Schedule Matching",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 0]
    },
    {
      "parameters": {
        "jsCode": "// Contact Generation\nconst input = $input.first().json;\n\nif (input.error) {\n  return input; // Pass through errors\n}\n\ntry {\n  const generateContacts = (companyName, domain) => {\n    const realDomain = domain || `${companyName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase()}.com`;\n    \n    return [\n      {\n        title: 'President/CEO',\n        email_formats: [`president@${realDomain}`, `ceo@${realDomain}`, `info@${realDomain}`],\n        priority: 'Primary Decision Maker'\n      },\n      {\n        title: 'Business Development Director',\n        email_formats: [`bizdev@${realDomain}`, `sales@${realDomain}`, `bd@${realDomain}`],\n        priority: 'Key Contact'\n      },\n      {\n        title: 'Operations Manager',\n        email_formats: [`operations@${realDomain}`, `ops@${realDomain}`, `manager@${realDomain}`],\n        priority: 'Implementation Contact'\n      }\n    ];\n  };\n  \n  const contacts = generateContacts(input.extractedCompany, input.companyDomain);\n  \n  console.log(`[GSA_CONTACTS] Generated ${contacts.length} contact profiles`);\n  \n  return {\n    ...input,\n    contacts,\n    contactsGenerated: true\n  };\n  \n} catch (error) {\n  console.error('[GSA_CONTACTS] Error:', error.message);\n  return {\n    ...input,\n    contactError: error.message,\n    contacts: [],\n    contactsGenerated: false\n  };\n}"
      },
      "id": "contact-generation",
      "name": "Contact Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 0]
    },
    {
      "parameters": {
        "jsCode": "// Value Proposition Development\nconst input = $input.first().json;\n\nif (input.error) {\n  return input; // Pass through errors\n}\n\ntry {\n  const generateValueProps = (primaryType, opportunityLevel) => {\n    const baseProps = {\n      marketSize: '$600+ billion federal marketplace',\n      paymentTerms: 'Guaranteed 30-day payment',\n      growthPotential: '25-200% revenue increase',\n      contractDuration: 'Multi-year agreements available'\n    };\n    \n    const industrySpecific = {\n      'technology': ['Cybersecurity focus', 'Cloud services demand', 'AI/ML opportunities'],\n      'medical': ['Healthcare modernization', 'Emergency response needs', 'Veteran care priority'],\n      'staffing': ['Workforce flexibility', 'Specialized talent needs', 'Security clearance premiums'],\n      'security': ['Critical infrastructure protection', 'Emergency preparedness', 'Threat assessment needs'],\n      'consulting': ['Digital transformation', 'Process optimization', 'Change management'],\n      'construction': ['Infrastructure investment', 'Green building initiatives', 'Facility modernization'],\n      'manufacturing': ['Supply chain resilience', 'Defense production', 'Quality standards'],\n      'services': ['Operational efficiency', 'Cost reduction', 'Service delivery improvement']\n    };\n    \n    return {\n      ...baseProps,\n      industrySpecific: industrySpecific[primaryType] || industrySpecific['services']\n    };\n  };\n  \n  const valueProps = generateValueProps(input.primaryType, input.opportunityLevel);\n  \n  console.log(`[GSA_VALUE] Generated value propositions for ${input.primaryType}`);\n  \n  return {\n    ...input,\n    valueProposition: valueProps,\n    valuePropsGenerated: true\n  };\n  \n} catch (error) {\n  console.error('[GSA_VALUE] Error:', error.message);\n  return {\n    ...input,\n    valueError: error.message,\n    valueProposition: {\n      marketSize: '$600+ billion federal marketplace',\n      paymentTerms: 'Guaranteed 30-day payment',\n      industrySpecific: ['General federal opportunities']\n    },\n    valuePropsGenerated: false\n  };\n}"
      },
      "id": "value-proposition",
      "name": "Value Proposition Development",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 0]
    },
    {
      "parameters": {
        "jsCode": "// Response Formatting\nconst input = $input.first().json;\n\ntry {\n  if (input.error) {\n    const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n    return `🚨 **GSA Research Error**\\n\\nError analyzing \\\"${input.originalInput}\\\": ${input.errorMessage}\\n\\n**Time**: ${currentTime}\\n**Status**: Please try again or contact support`;\n  }\n  \n  let response = `🔍 **Real-Time GSA Analysis: ${input.extractedCompany}**\\n\\n`;\n  \n  // Add company info if found\n  if (input.searchResults) {\n    response += `**🌐 Company Website**: ${input.searchResults.link}\\n`;\n    response += `**📄 Business Profile**: ${input.realBusinessInfo}\\n\\n`;\n  }\n  \n  // Core GSA analysis\n  response += `**✅ GSA Status**: POTENTIAL CANDIDATE\\n` +\n              `**📊 Opportunity Level**: ${input.opportunityLevel}\\n` +\n              `**🏭 Business Type**: ${input.primaryType.toUpperCase()}\\n` +\n              `**📋 Recommended Schedule**: ${input.gsaSchedule}\\n` +\n              `**🔢 NAICS Codes**: ${input.naicsCodes.join(', ')}\\n\\n`;\n  \n  // Decision makers\n  response += `**👥 KEY DECISION MAKERS**:\\n`;\n  if (input.contacts && input.contacts.length > 0) {\n    response += input.contacts.map(dm => `• **${dm.title}**: ${dm.email_formats[0]}`).join('\\n');\n  } else {\n    response += `• **Contact Info**: Use company website for current contacts`;\n  }\n  \n  // Value proposition\n  response += `\\n\\n**💰 GSA VALUE PROPOSITION**:\\n`;\n  if (input.valueProposition) {\n    response += `• **Market Size**: ${input.valueProposition.marketSize}\\n` +\n                `• **Payment Terms**: ${input.valueProposition.paymentTerms}\\n` +\n                `• **Growth Potential**: ${input.valueProposition.growthPotential || '25-200% revenue increase'}\\n` +\n                `• **Contract Duration**: ${input.valueProposition.contractDuration}\\n`;\n    \n    if (input.valueProposition.industrySpecific) {\n      response += `\\n**🎯 Industry-Specific Benefits**:\\n`;\n      response += input.valueProposition.industrySpecific.map(benefit => `• ${benefit}`).join('\\n');\n    }\n  }\n  \n  response += `\\n\\n**🚀 NEXT STEPS**: Schedule consultation with NRG GSA specialists`;\n  \n  const processingTime = Date.now() - input.processingStartTime;\n  console.log(`[GSA_FORMAT] Analysis complete for ${input.extractedCompany} in ${processingTime}ms`);\n  \n  return response;\n  \n} catch (error) {\n  console.error('[GSA_FORMAT] Error:', error.message);\n  const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n  return `🚨 **GSA Analysis Error**\\n\\nFormatting error: ${error.message}\\n\\n**Time**: ${currentTime}`;\n}"
      },
      "id": "response-formatting",
      "name": "Response Formatting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 0]
    },
    {
      "parameters": {
        "operation": "noOp"
      },
      "id": "output-node",
      "name": "Output",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1600, 0]
    }
  ],
  "connections": {
    "Input Processor": {
      "main": [
        [
          {
            "node": "Company Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Company Extraction": {
      "main": [
        [
          {
            "node": "Google Search Integration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Search Integration": {
      "main": [
        [
          {
            "node": "Industry Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Industry Analysis": {
      "main": [
        [
          {
            "node": "GSA Schedule Matching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GSA Schedule Matching": {
      "main": [
        [
          {
            "node": "Contact Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contact Generation": {
      "main": [
        [
          {
            "node": "Value Proposition Development",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Value Proposition Development": {
      "main": [
        [
          {
            "node": "Response Formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatting": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": ["GSA", "Research", "Modular", "Sub-Workflow"]
}
