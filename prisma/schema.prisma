generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String   @id
  userId    String   @unique(map: "Profile_userId_key")
  name      String
  imageUrl  String?  @db.Text
  email     String
  role      UserRole @default(USER)
  servers   Server[]
  members   Member[]
  channels  Channel[]
  sessions  UserSession[]
  
  // External Integration Relations
  apiTokens     ApiToken[]
  agentProfile  AgentProfile?
  visitorSessions VisitorSession[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([role], map: "Profile_role_idx")
  @@map("profile")
}

model Server {
  id         String    @id
  name       String
  imageUrl   String?   @db.Text
  inviteCode String    @unique(map: "Server_inviteCode_key")
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  activities ServerActivity[]
  
  // Workflow configuration
  workflowEnabled  Boolean?  @default(true)
  selectedWorkflow String?
  
  // External Integration
  apiTokens  ApiToken[]
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([profileId], map: "Server_profileId_idx")
  @@map("server")
}

enum UserRole {
  HOST
  ADMIN
  MODERATOR
  USER

  @@map("user_role")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

  @@map("member_role")
}

enum OnlineStatus {
  ONLINE
  AWAY
  DO_NOT_DISTURB
  OFFLINE

  @@map("online_status")
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  onlineStatus           OnlineStatus    @default(OFFLINE)
  lastSeen               DateTime        @default(now())
  isOnline               Boolean         @default(false)

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]
  activities             MemberActivity[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  @@index([profileId], map: "Member_profileId_idx")
  @@index([serverId], map: "Member_serverId_idx")
  @@index([onlineStatus], map: "Member_onlineStatus_idx")
  @@index([isOnline], map: "Member_isOnline_idx")
  @@index([lastSeen], map: "Member_lastSeen_idx")
  @@map("member")
  @@unique([serverId, profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO

  @@map("channel_type")
}

model Channel {
  id        String     @id
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]
  activities ChannelActivity[]
  
  // Workflow configuration
  workflowEnabled  Boolean?  @default(true)
  selectedWorkflow String?
  
  createdAt DateTime   @default(now())
  updatedAt DateTime

  @@index([profileId], map: "Channel_profileId_idx")
  @@index([serverId], map: "Channel_serverId_idx")
  @@map("channel")
}

enum MessageRole {
  user
  system
  @@map("message_role")
}

model Message {
  id        String    @id
  role      MessageRole
  content   String    @db.Text
  fileUrl   String?   @db.Text
  memberId  String
  member    Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean    @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  
  // Enhanced file metadata relation
  fileMetadata FileMetadata?
  
  // Shared message relation
  sharedMessages SharedMessage[]

  @@index([channelId], map: "Message_channelId_idx")
  @@index([memberId], map: "Message_memberId_idx")
  @@index([createdAt], map: "Message_createdAt_idx")
  @@map("message")
}

model Conversation {
  id          String    @id
  memberOneId String
  memberOne   Member    @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member    @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@index([memberOneId], map: "Conversation_memberOneId_idx")
  @@index([memberTwoId], map: "Conversation_memberTwoId_idx")
  @@map("conversation")
}

model DirectMessage {
  id             String       @id
  content        String
  fileUrl        String?
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  
  // Enhanced file metadata relation
  fileMetadata   FileMetadata?
  
  // Shared message relation
  sharedMessages SharedMessage[]

  @@index([conversationId], map: "DirectMessage_conversationId_idx")
  @@index([memberId], map: "DirectMessage_memberId_idx")
  @@index([createdAt], map: "DirectMessage_createdAt_idx")
  @@map("directmessage")
}

enum ActivityType {
  MESSAGE_SENT
  MESSAGE_DELETED
  MESSAGE_EDITED
  CHANNEL_JOINED
  CHANNEL_LEFT
  VOICE_JOINED
  VOICE_LEFT
  TYPING_STARTED
  TYPING_STOPPED
  FILE_UPLOADED
  MEMBER_JOINED
  MEMBER_LEFT

  @@map("activity_type")
}

model UserSession {
  id          String   @id @default(uuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sessionId   String   @unique
  serverId    String?
  channelId   String?
  ipAddress   String?
  userAgent   String?  @db.Text
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  connectedAt DateTime @default(now())
  disconnectedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([profileId], map: "UserSession_profileId_idx")
  @@index([sessionId], map: "UserSession_sessionId_idx")
  @@index([isActive], map: "UserSession_isActive_idx")
  @@index([lastActivity], map: "UserSession_lastActivity_idx")
  @@map("user_session")
}

model ServerActivity {
  id          String      @id @default(uuid())
  serverId    String
  server      Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  memberId    String?
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  channelId   String?
  timestamp   DateTime    @default(now())

  @@index([serverId], map: "ServerActivity_serverId_idx")
  @@index([memberId], map: "ServerActivity_memberId_idx")
  @@index([activityType], map: "ServerActivity_activityType_idx")
  @@index([timestamp], map: "ServerActivity_timestamp_idx")
  @@index([channelId], map: "ServerActivity_channelId_idx")
  @@map("server_activity")
}

model ChannelActivity {
  id          String      @id @default(uuid())
  channelId   String
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  memberId    String?
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  timestamp   DateTime    @default(now())

  @@index([channelId], map: "ChannelActivity_channelId_idx")
  @@index([memberId], map: "ChannelActivity_memberId_idx")
  @@index([activityType], map: "ChannelActivity_activityType_idx")
  @@index([timestamp], map: "ChannelActivity_timestamp_idx")
  @@map("channel_activity")
}

model MemberActivity {
  id          String      @id @default(uuid())
  memberId    String
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  serverId    String?
  channelId   String?
  timestamp   DateTime    @default(now())

  @@index([memberId], map: "MemberActivity_memberId_idx")
  @@index([activityType], map: "MemberActivity_activityType_idx")
  @@index([timestamp], map: "MemberActivity_timestamp_idx")
  @@index([serverId], map: "MemberActivity_serverId_idx")
  @@index([channelId], map: "MemberActivity_channelId_idx")
  @@map("member_activity")
}

enum FileType {
  IMAGE
  PDF
  VIDEO
  AUDIO
  DOCUMENT
  OTHER

  @@map("file_type")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  ENHANCED

  @@map("processing_status")
}

enum AIContentCategory {
  RESEARCH_REPORT
  DOCUMENT_ANALYSIS
  BUSINESS_INTELLIGENCE
  TECHNICAL_ANALYSIS
  MARKET_INSIGHTS
  DATA_VISUALIZATION
  AI_RECOMMENDATION
  CODE_ANALYSIS
  MEETING_SUMMARY
  GENERAL_AI_RESPONSE

  @@map("ai_content_category")
}

model FileMetadata {
  id               String           @id @default(uuid())
  messageId        String?          @unique
  directMessageId  String?          @unique
  message          Message?         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  directMessage    DirectMessage?   @relation(fields: [directMessageId], references: [id], onDelete: Cascade)
  
  // Basic file information
  originalUrl      String           @db.Text
  fileName         String?          @db.Text
  fileSize         Int?
  mimeType         String?
  fileType         FileType
  
  // Enhanced metadata
  extractedText    String?          @db.LongText
  description      String?          @db.Text
  tags             String?          @db.Text // JSON array of tags
  location         String?          @db.Text // JSON object with location data
  businessContext  String?          @db.Text
  
  // External document links
  externalLinks    String?          @db.Text // JSON array of external doc links
  googleDocsUrl    String?          @db.Text
  sharePointUrl    String?          @db.Text
  confluenceUrl    String?          @db.Text
  
  // Processing status
  processingStatus ProcessingStatus @default(PENDING)
  ocrCompleted     Boolean          @default(false)
  aiAnalyzed       Boolean          @default(false)
  lastProcessed    DateTime?
  
  // AI Analysis results
  aiSummary        String?          @db.Text
  aiCategories     String?          @db.Text // JSON array
  businessEntities String?          @db.Text // JSON array of detected companies/people
  actionItems      String?          @db.Text // JSON array of extracted action items
  
  // Workflow integration
  workflowTriggered Boolean         @default(false)
  workflowResults   String?         @db.Text // JSON object of workflow outputs
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([fileType], map: "FileMetadata_fileType_idx")
  @@index([processingStatus], map: "FileMetadata_processingStatus_idx")
  @@index([createdAt], map: "FileMetadata_createdAt_idx")
  @@index([lastProcessed], map: "FileMetadata_lastProcessed_idx")
  @@index([messageId], map: "FileMetadata_messageId_idx")
  @@index([directMessageId], map: "FileMetadata_directMessageId_idx")
  @@map("file_metadata")
}

model SharedMessage {
  id                String            @id @default(uuid())
  shareId           String            @unique
  messageId         String?
  directMessageId   String?
  message           Message?          @relation(fields: [messageId], references: [id], onDelete: Cascade)
  directMessage     DirectMessage?    @relation(fields: [directMessageId], references: [id], onDelete: Cascade)
  
  // Sharing configuration
  title             String            @db.Text
  description       String?           @db.Text
  category          AIContentCategory @default(GENERAL_AI_RESPONSE)
  isPublic          Boolean           @default(true)
  allowComments     Boolean           @default(false)
  
  // AI content specific fields
  isAIGenerated     Boolean           @default(false)
  sourceUrl         String?           @db.Text
  confidenceScore   Float?
  processingTime    Int?              // milliseconds
  
  // Enhanced sharing options
  includeMetadata   Boolean           @default(false)
  enhanceForSharing Boolean           @default(false)
  executiveSummary  String?           @db.Text
  keyInsights       String?           @db.Text // JSON array
  
  // Sharing metadata
  sharedBy          String            // Profile ID
  viewCount         Int               @default(0)
  lastViewed        DateTime?
  sharedAt          DateTime          @default(now())
  
  // Access control
  expiresAt         DateTime?
  passwordProtected Boolean           @default(false)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([shareId], map: "SharedMessage_shareId_idx")
  @@index([category], map: "SharedMessage_category_idx")
  @@index([isAIGenerated], map: "SharedMessage_isAIGenerated_idx")
  @@index([isPublic], map: "SharedMessage_isPublic_idx")
  @@index([sharedBy], map: "SharedMessage_sharedBy_idx")
  @@index([sharedAt], map: "SharedMessage_sharedAt_idx")
  @@index([messageId], map: "SharedMessage_messageId_idx")
  @@index([directMessageId], map: "SharedMessage_directMessageId_idx")
  @@map("shared_message")
}

// External Integration System

enum ApiTokenType {
  SERVICE_ACCOUNT
  WEBHOOK_INTEGRATION
  WIDGET_EMBED
  AGENT_BOT

  @@map("api_token_type")
}

enum AgentType {
  AI_ASSISTANT
  VAPI_TRANSCRIBER
  SYSTEM_NOTIFIER
  PORTFOLIO_VISITOR
  WORKFLOW_RESPONDER
  EXTERNAL_SERVICE

  @@map("agent_type")
}

model ApiToken {
  id               String          @id @default(uuid())
  name             String          // Human readable name
  token            String          @unique // The actual API token
  type             ApiTokenType
  profileId        String          // Owner of the token
  profile          Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // Permissions and scope
  serverId         String?         // Scope to specific server
  server           Server?         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channelIds       String?         @db.Text // JSON array of allowed channel IDs
  permissions      String          @db.Text // JSON object of permissions
  
  // External integration metadata
  sourceOrigin     String?         // Portfolio site origin URL
  webhookUrl       String?         @db.Text // Callback webhook URL
  metadata         String?         @db.Text // JSON metadata for integration
  
  // Token lifecycle
  isActive         Boolean         @default(true)
  expiresAt        DateTime?
  lastUsed         DateTime?
  usageCount       Int             @default(0)
  
  // Rate limiting
  rateLimit        Int             @default(100) // requests per hour
  rateLimitWindow  Int             @default(3600) // window in seconds
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  // Relations
  agentProfile     AgentProfile?
  externalMessages ExternalMessage[]

  @@index([profileId], map: "ApiToken_profileId_idx")
  @@index([serverId], map: "ApiToken_serverId_idx")
  @@index([type], map: "ApiToken_type_idx")
  @@index([token], map: "ApiToken_token_idx")
  @@index([isActive], map: "ApiToken_isActive_idx")
  @@map("api_token")
}

model AgentProfile {
  id              String          @id @default(uuid())
  profileId       String          @unique // Links to main Profile
  profile         Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  apiTokenId      String          @unique
  apiToken        ApiToken        @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)
  
  agentType       AgentType
  displayName     String          // e.g., "AI Assistant", "VAPI Transcriber"
  avatarUrl       String?         @db.Text
  description     String?         @db.Text
  
  // Agent capabilities
  canImpersonate  Boolean         @default(false) // Can send messages as other users
  canCreateUsers  Boolean         @default(false) // Can create new profiles
  systemBot       Boolean         @default(false) // System-level permissions
  
  // Integration settings
  sourceConfig    String?         @db.Text // JSON config for external source
  responseConfig  String?         @db.Text // JSON config for response formatting
  
  // Activity tracking
  isOnline        Boolean         @default(false)
  lastActive      DateTime?
  messageCount    Int             @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([profileId], map: "AgentProfile_profileId_idx")
  @@index([apiTokenId], map: "AgentProfile_apiTokenId_idx")
  @@index([agentType], map: "AgentProfile_agentType_idx")
  @@index([systemBot], map: "AgentProfile_systemBot_idx")
  @@map("agent_profile")
}

model ExternalMessage {
  id               String          @id @default(uuid())
  apiTokenId       String
  apiToken         ApiToken        @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)
  
  // Message data
  content          String          @db.Text
  channelId        String?         // Target channel
  conversationId   String?         // Target conversation
  
  // External source data
  sourceType       String          // contact-form, vapi-call, chat-widget, etc
  sourceId         String?         // External ID from source system
  visitorData      String?         @db.Text // JSON visitor/session data
  
  // Processing status
  processed        Boolean         @default(false)
  messageId        String?         // Created Discordant message ID
  directMessageId  String?         // Created direct message ID
  error            String?         @db.Text
  
  // Metadata
  ipAddress        String?
  userAgent        String?         @db.Text
  referrer         String?         @db.Text
  sessionData      String?         @db.Text // JSON session information
  
  createdAt        DateTime        @default(now())
  processedAt      DateTime?

  @@index([apiTokenId], map: "ExternalMessage_apiTokenId_idx")
  @@index([channelId], map: "ExternalMessage_channelId_idx")
  @@index([sourceType], map: "ExternalMessage_sourceType_idx")
  @@index([processed], map: "ExternalMessage_processed_idx")
  @@index([createdAt], map: "ExternalMessage_createdAt_idx")
  @@map("external_message")
}

model VisitorSession {
  id              String          @id @default(uuid())
  sessionId       String          @unique // External session ID
  
  // Visitor identification
  email           String?
  name            String?
  profileId       String?         // If they become a real user
  profile         Profile?        @relation(fields: [profileId], references: [id], onDelete: SetNull)
  
  // Session metadata
  origin          String          // Portfolio site URL
  ipAddress       String?
  userAgent       String?         @db.Text
  referrer        String?         @db.Text
  
  // Activity tracking
  pageViews       Int             @default(0)
  messagesCount   Int             @default(0)
  lastActivity    DateTime        @default(now())
  
  // Session data
  customData      String?         @db.Text // JSON custom fields
  tags            String?         @db.Text // JSON tags array
  notes           String?         @db.Text // Admin notes
  
  // Integration
  channelId       String?         // Associated channel for this visitor
  conversationId  String?         // Associated conversation
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([sessionId], map: "VisitorSession_sessionId_idx")
  @@index([profileId], map: "VisitorSession_profileId_idx")
  @@index([email], map: "VisitorSession_email_idx")
  @@index([isActive], map: "VisitorSession_isActive_idx")
  @@index([lastActivity], map: "VisitorSession_lastActivity_idx")
  @@map("visitor_session")
}
