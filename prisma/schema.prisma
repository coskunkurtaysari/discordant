generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
model Profile {
  id        String   @id
  userId    String   @unique(map: "Profile_userId_key")
  name      String
  imageUrl  String?  @db.Text
  email     String
  servers   Server[]
  members   Member[]
  channels  Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("profile")
}

model Server {
  id         String    @id
  name       String
  imageUrl   String?   @db.Text
  inviteCode String    @unique(map: "Server_inviteCode_key")
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([profileId], map: "Server_profileId_idx")
  @@map("server")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

  @@map("member_role")
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  @@index([profileId], map: "Member_profileId_idx")
  @@index([serverId], map: "Member_serverId_idx")
  @@map("member")
  @@unique([serverId, profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO

  @@map("channel_type")
}

model Channel {
  id        String     @id
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime

  @@index([profileId], map: "Channel_profileId_idx")
  @@index([serverId], map: "Channel_serverId_idx")
  @@map("channel")
}

enum MessageRole {
  user
  system
  @@map("message_role")
}

model Message {
  id        String    @id
  role      MessageRole
  content   String    @db.Text
  fileUrl   String?   @db.Text
  memberId  String
  member    Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean    @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime

  @@index([channelId], map: "Message_channelId_idx")
  @@index([memberId], map: "Message_memberId_idx")
  @@map("message")
}

model Conversation {
  id          String    @id
  memberOneId String
  memberOne   Member    @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member    @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@index([memberOneId], map: "Conversation_memberOneId_idx")
  @@index([memberTwoId], map: "Conversation_memberTwoId_idx")
  @@map("conversation")
}

model DirectMessage {
  id             String       @id
  content        String
  fileUrl        String?
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime

  @@index([conversationId], map: "DirectMessage_conversationId_idx")
  @@index([memberId], map: "DirectMessage_memberId_idx")
  @@map("directmessage")
}
