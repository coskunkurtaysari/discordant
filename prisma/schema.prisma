generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String   @id
  userId    String   @unique(map: "Profile_userId_key")
  name      String
  imageUrl  String?  @db.Text
  email     String
  servers   Server[]
  members   Member[]
  channels  Channel[]
  sessions  UserSession[]
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@map("profile")
}

model Server {
  id         String    @id
  name       String
  imageUrl   String?   @db.Text
  inviteCode String    @unique(map: "Server_inviteCode_key")
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]
  activities ServerActivity[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([profileId], map: "Server_profileId_idx")
  @@map("server")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

  @@map("member_role")
}

enum OnlineStatus {
  ONLINE
  AWAY
  DO_NOT_DISTURB
  OFFLINE

  @@map("online_status")
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  onlineStatus           OnlineStatus    @default(OFFLINE)
  lastSeen               DateTime        @default(now())
  isOnline               Boolean         @default(false)

  messages               Message[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  directMessages         DirectMessage[]
  activities             MemberActivity[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  @@index([profileId], map: "Member_profileId_idx")
  @@index([serverId], map: "Member_serverId_idx")
  @@index([onlineStatus], map: "Member_onlineStatus_idx")
  @@index([isOnline], map: "Member_isOnline_idx")
  @@index([lastSeen], map: "Member_lastSeen_idx")
  @@map("member")
  @@unique([serverId, profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO

  @@map("channel_type")
}

model Channel {
  id        String     @id
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]
  activities ChannelActivity[]
  createdAt DateTime   @default(now())
  updatedAt DateTime

  @@index([profileId], map: "Channel_profileId_idx")
  @@index([serverId], map: "Channel_serverId_idx")
  @@map("channel")
}

enum MessageRole {
  user
  system
  @@map("message_role")
}

model Message {
  id        String    @id
  role      MessageRole
  content   String    @db.Text
  fileUrl   String?   @db.Text
  memberId  String
  member    Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean    @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime

  @@index([channelId], map: "Message_channelId_idx")
  @@index([memberId], map: "Message_memberId_idx")
  @@index([createdAt], map: "Message_createdAt_idx")
  @@map("message")
}

model Conversation {
  id          String    @id
  memberOneId String
  memberOne   Member    @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member    @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@index([memberOneId], map: "Conversation_memberOneId_idx")
  @@index([memberTwoId], map: "Conversation_memberTwoId_idx")
  @@map("conversation")
}

model DirectMessage {
  id             String       @id
  content        String
  fileUrl        String?
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime

  @@index([conversationId], map: "DirectMessage_conversationId_idx")
  @@index([memberId], map: "DirectMessage_memberId_idx")
  @@index([createdAt], map: "DirectMessage_createdAt_idx")
  @@map("directmessage")
}

enum ActivityType {
  MESSAGE_SENT
  MESSAGE_DELETED
  MESSAGE_EDITED
  CHANNEL_JOINED
  CHANNEL_LEFT
  VOICE_JOINED
  VOICE_LEFT
  TYPING_STARTED
  TYPING_STOPPED
  FILE_UPLOADED
  MEMBER_JOINED
  MEMBER_LEFT

  @@map("activity_type")
}

model UserSession {
  id          String   @id @default(uuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sessionId   String   @unique
  serverId    String?
  channelId   String?
  ipAddress   String?
  userAgent   String?  @db.Text
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  connectedAt DateTime @default(now())
  disconnectedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([profileId], map: "UserSession_profileId_idx")
  @@index([sessionId], map: "UserSession_sessionId_idx")
  @@index([isActive], map: "UserSession_isActive_idx")
  @@index([lastActivity], map: "UserSession_lastActivity_idx")
  @@map("user_session")
}

model ServerActivity {
  id          String      @id @default(uuid())
  serverId    String
  server      Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  memberId    String?
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  channelId   String?
  timestamp   DateTime    @default(now())

  @@index([serverId], map: "ServerActivity_serverId_idx")
  @@index([memberId], map: "ServerActivity_memberId_idx")
  @@index([activityType], map: "ServerActivity_activityType_idx")
  @@index([timestamp], map: "ServerActivity_timestamp_idx")
  @@index([channelId], map: "ServerActivity_channelId_idx")
  @@map("server_activity")
}

model ChannelActivity {
  id          String      @id @default(uuid())
  channelId   String
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  memberId    String?
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  timestamp   DateTime    @default(now())

  @@index([channelId], map: "ChannelActivity_channelId_idx")
  @@index([memberId], map: "ChannelActivity_memberId_idx")
  @@index([activityType], map: "ChannelActivity_activityType_idx")
  @@index([timestamp], map: "ChannelActivity_timestamp_idx")
  @@map("channel_activity")
}

model MemberActivity {
  id          String      @id @default(uuid())
  memberId    String
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  activityType ActivityType
  description String      @db.Text
  metadata    String?     @db.Text
  serverId    String?
  channelId   String?
  timestamp   DateTime    @default(now())

  @@index([memberId], map: "MemberActivity_memberId_idx")
  @@index([activityType], map: "MemberActivity_activityType_idx")
  @@index([timestamp], map: "MemberActivity_timestamp_idx")
  @@index([serverId], map: "MemberActivity_serverId_idx")
  @@index([channelId], map: "MemberActivity_channelId_idx")
  @@map("member_activity")
}
